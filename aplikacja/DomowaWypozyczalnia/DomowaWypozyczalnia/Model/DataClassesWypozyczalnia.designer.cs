#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DomowaWypozyczalnia
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BD")]
	public partial class DataClassesWypozyczalnia : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCarrier(Carrier instance);
    partial void UpdateCarrier(Carrier instance);
    partial void DeleteCarrier(Carrier instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertCast(Cast instance);
    partial void UpdateCast(Cast instance);
    partial void DeleteCast(Cast instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertFilm(Film instance);
    partial void UpdateFilm(Film instance);
    partial void DeleteFilm(Film instance);
    partial void InsertGenre(Genre instance);
    partial void UpdateGenre(Genre instance);
    partial void DeleteGenre(Genre instance);
    partial void InsertHire(Hire instance);
    partial void UpdateHire(Hire instance);
    partial void DeleteHire(Hire instance);
    partial void InsertInmate(Inmate instance);
    partial void UpdateInmate(Inmate instance);
    partial void DeleteInmate(Inmate instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertLocationType(LocationType instance);
    partial void UpdateLocationType(LocationType instance);
    partial void DeleteLocationType(LocationType instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertProductionCompany(ProductionCompany instance);
    partial void UpdateProductionCompany(ProductionCompany instance);
    partial void DeleteProductionCompany(ProductionCompany instance);
    partial void InsertProductionCountry(ProductionCountry instance);
    partial void UpdateProductionCountry(ProductionCountry instance);
    partial void DeleteProductionCountry(ProductionCountry instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertSpecimen(Specimen instance);
    partial void UpdateSpecimen(Specimen instance);
    partial void DeleteSpecimen(Specimen instance);
    #endregion
		
		public DataClassesWypozyczalnia() : 
				base(global::DomowaWypozyczalnia.Properties.Settings.Default.BDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesWypozyczalnia(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesWypozyczalnia(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesWypozyczalnia(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesWypozyczalnia(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Carrier> Carriers
		{
			get
			{
				return this.GetTable<Carrier>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Cast> Casts
		{
			get
			{
				return this.GetTable<Cast>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Film> Films
		{
			get
			{
				return this.GetTable<Film>();
			}
		}
		
		public System.Data.Linq.Table<Genre> Genres
		{
			get
			{
				return this.GetTable<Genre>();
			}
		}
		
		public System.Data.Linq.Table<Hire> Hires
		{
			get
			{
				return this.GetTable<Hire>();
			}
		}
		
		public System.Data.Linq.Table<Inmate> Inmates
		{
			get
			{
				return this.GetTable<Inmate>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<LocationType> LocationTypes
		{
			get
			{
				return this.GetTable<LocationType>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<ProductionCompany> ProductionCompanies
		{
			get
			{
				return this.GetTable<ProductionCompany>();
			}
		}
		
		public System.Data.Linq.Table<ProductionCountry> ProductionCountries
		{
			get
			{
				return this.GetTable<ProductionCountry>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<Specimen> Specimens
		{
			get
			{
				return this.GetTable<Specimen>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Carrier")]
	public partial class Carrier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Specimen> _Specimens;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Carrier()
		{
			this._Specimens = new EntitySet<Specimen>(new Action<Specimen>(this.attach_Specimens), new Action<Specimen>(this.detach_Specimens));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Carrier_Specimen", Storage="_Specimens", ThisKey="Id", OtherKey="Carrier")]
		public EntitySet<Specimen> Specimens
		{
			get
			{
				return this._Specimens;
			}
			set
			{
				this._Specimens.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Specimens(Specimen entity)
		{
			this.SendPropertyChanging();
			entity.Carrier1 = this;
		}
		
		private void detach_Specimens(Specimen entity)
		{
			this.SendPropertyChanging();
			entity.Carrier1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
		private string _HashedPassword;
		
		private int _Inmate;
		
		private bool _Admin;
		
		private bool _Active;
		
		private EntityRef<Inmate> _Inmate1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnHashedPasswordChanging(string value);
    partial void OnHashedPasswordChanged();
    partial void OnInmateChanging(int value);
    partial void OnInmateChanged();
    partial void OnAdminChanging(bool value);
    partial void OnAdminChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public User()
		{
			this._Inmate1 = default(EntityRef<Inmate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="VarChar(31) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HashedPassword", DbType="VarChar(255)")]
		public string HashedPassword
		{
			get
			{
				return this._HashedPassword;
			}
			set
			{
				if ((this._HashedPassword != value))
				{
					this.OnHashedPasswordChanging(value);
					this.SendPropertyChanging();
					this._HashedPassword = value;
					this.SendPropertyChanged("HashedPassword");
					this.OnHashedPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inmate", DbType="Int NOT NULL")]
		public int Inmate
		{
			get
			{
				return this._Inmate;
			}
			set
			{
				if ((this._Inmate != value))
				{
					if (this._Inmate1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInmateChanging(value);
					this.SendPropertyChanging();
					this._Inmate = value;
					this.SendPropertyChanged("Inmate");
					this.OnInmateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Bit NOT NULL")]
		public bool Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("Admin");
					this.OnAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inmate_User", Storage="_Inmate1", ThisKey="Inmate", OtherKey="Id", IsForeignKey=true)]
		public Inmate Inmate1
		{
			get
			{
				return this._Inmate1.Entity;
			}
			set
			{
				Inmate previousValue = this._Inmate1.Entity;
				if (((previousValue != value) 
							|| (this._Inmate1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inmate1.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Inmate1.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._Inmate = value.Id;
					}
					else
					{
						this._Inmate = default(int);
					}
					this.SendPropertyChanged("Inmate1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cast")]
	public partial class Cast : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Person;
		
		private int _Role;
		
		private int _Film;
		
		private string _Character;
		
		private EntityRef<Film> _Film1;
		
		private EntityRef<Person> _Person1;
		
		private EntityRef<Role> _Role1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPersonChanging(int value);
    partial void OnPersonChanged();
    partial void OnRoleChanging(int value);
    partial void OnRoleChanged();
    partial void OnFilmChanging(int value);
    partial void OnFilmChanged();
    partial void OnCharacterChanging(string value);
    partial void OnCharacterChanged();
    #endregion
		
		public Cast()
		{
			this._Film1 = default(EntityRef<Film>);
			this._Person1 = default(EntityRef<Person>);
			this._Role1 = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Person", DbType="Int NOT NULL")]
		public int Person
		{
			get
			{
				return this._Person;
			}
			set
			{
				if ((this._Person != value))
				{
					if (this._Person1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonChanging(value);
					this.SendPropertyChanging();
					this._Person = value;
					this.SendPropertyChanged("Person");
					this.OnPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Role", DbType="Int NOT NULL")]
		public int Role
		{
			get
			{
				return this._Role;
			}
			set
			{
				if ((this._Role != value))
				{
					if (this._Role1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleChanging(value);
					this.SendPropertyChanging();
					this._Role = value;
					this.SendPropertyChanged("Role");
					this.OnRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Film", DbType="Int NOT NULL")]
		public int Film
		{
			get
			{
				return this._Film;
			}
			set
			{
				if ((this._Film != value))
				{
					if (this._Film1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFilmChanging(value);
					this.SendPropertyChanging();
					this._Film = value;
					this.SendPropertyChanged("Film");
					this.OnFilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Character", DbType="VarChar(50)")]
		public string Character
		{
			get
			{
				return this._Character;
			}
			set
			{
				if ((this._Character != value))
				{
					this.OnCharacterChanging(value);
					this.SendPropertyChanging();
					this._Character = value;
					this.SendPropertyChanged("Character");
					this.OnCharacterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_Cast", Storage="_Film1", ThisKey="Film", OtherKey="Id", IsForeignKey=true)]
		public Film Film1
		{
			get
			{
				return this._Film1.Entity;
			}
			set
			{
				Film previousValue = this._Film1.Entity;
				if (((previousValue != value) 
							|| (this._Film1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Film1.Entity = null;
						previousValue.Casts.Remove(this);
					}
					this._Film1.Entity = value;
					if ((value != null))
					{
						value.Casts.Add(this);
						this._Film = value.Id;
					}
					else
					{
						this._Film = default(int);
					}
					this.SendPropertyChanged("Film1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Cast", Storage="_Person1", ThisKey="Person", OtherKey="Id", IsForeignKey=true)]
		public Person Person1
		{
			get
			{
				return this._Person1.Entity;
			}
			set
			{
				Person previousValue = this._Person1.Entity;
				if (((previousValue != value) 
							|| (this._Person1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person1.Entity = null;
						previousValue.Casts.Remove(this);
					}
					this._Person1.Entity = value;
					if ((value != null))
					{
						value.Casts.Add(this);
						this._Person = value.Id;
					}
					else
					{
						this._Person = default(int);
					}
					this.SendPropertyChanged("Person1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Cast", Storage="_Role1", ThisKey="Role", OtherKey="Id", IsForeignKey=true)]
		public Role Role1
		{
			get
			{
				return this._Role1.Entity;
			}
			set
			{
				Role previousValue = this._Role1.Entity;
				if (((previousValue != value) 
							|| (this._Role1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role1.Entity = null;
						previousValue.Casts.Remove(this);
					}
					this._Role1.Entity = value;
					if ((value != null))
					{
						value.Casts.Add(this);
						this._Role = value.Id;
					}
					else
					{
						this._Role = default(int);
					}
					this.SendPropertyChanged("Role1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Person> _Persons;
		
		private EntityRef<ProductionCountry> _ProductionCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Persons = new EntitySet<Person>(new Action<Person>(this.attach_Persons), new Action<Person>(this.detach_Persons));
			this._ProductionCountry = default(EntityRef<ProductionCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Person", Storage="_Persons", ThisKey="Id", OtherKey="Country")]
		public EntitySet<Person> Persons
		{
			get
			{
				return this._Persons;
			}
			set
			{
				this._Persons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_ProductionCountry", Storage="_ProductionCountry", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public ProductionCountry ProductionCountry
		{
			get
			{
				return this._ProductionCountry.Entity;
			}
			set
			{
				ProductionCountry previousValue = this._ProductionCountry.Entity;
				if (((previousValue != value) 
							|| (this._ProductionCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductionCountry.Entity = null;
						previousValue.Country1 = null;
					}
					this._ProductionCountry.Entity = value;
					if ((value != null))
					{
						value.Country1 = this;
					}
					this.SendPropertyChanged("ProductionCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = this;
		}
		
		private void detach_Persons(Person entity)
		{
			this.SendPropertyChanging();
			entity.Country1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Film")]
	public partial class Film : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Genre;
		
		private System.Nullable<System.DateTime> _ProductionDate;
		
		private int _ProductionCompany;
		
		private System.Nullable<int> _Duration;
		
		private EntitySet<Cast> _Casts;
		
		private EntitySet<Specimen> _Specimens;
		
		private EntityRef<Genre> _Genre1;
		
		private EntityRef<ProductionCompany> _ProductionCompany1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnGenreChanging(int value);
    partial void OnGenreChanged();
    partial void OnProductionDateChanging(System.Nullable<System.DateTime> value);
    partial void OnProductionDateChanged();
    partial void OnProductionCompanyChanging(int value);
    partial void OnProductionCompanyChanged();
    partial void OnDurationChanging(System.Nullable<int> value);
    partial void OnDurationChanged();
    #endregion
		
		public Film()
		{
			this._Casts = new EntitySet<Cast>(new Action<Cast>(this.attach_Casts), new Action<Cast>(this.detach_Casts));
			this._Specimens = new EntitySet<Specimen>(new Action<Specimen>(this.attach_Specimens), new Action<Specimen>(this.detach_Specimens));
			this._Genre1 = default(EntityRef<Genre>);
			this._ProductionCompany1 = default(EntityRef<ProductionCompany>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre", DbType="Int NOT NULL")]
		public int Genre
		{
			get
			{
				return this._Genre;
			}
			set
			{
				if ((this._Genre != value))
				{
					if (this._Genre1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenreChanging(value);
					this.SendPropertyChanging();
					this._Genre = value;
					this.SendPropertyChanged("Genre");
					this.OnGenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionDate", DbType="Date")]
		public System.Nullable<System.DateTime> ProductionDate
		{
			get
			{
				return this._ProductionDate;
			}
			set
			{
				if ((this._ProductionDate != value))
				{
					this.OnProductionDateChanging(value);
					this.SendPropertyChanging();
					this._ProductionDate = value;
					this.SendPropertyChanged("ProductionDate");
					this.OnProductionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionCompany", DbType="Int NOT NULL")]
		public int ProductionCompany
		{
			get
			{
				return this._ProductionCompany;
			}
			set
			{
				if ((this._ProductionCompany != value))
				{
					if (this._ProductionCompany1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductionCompanyChanging(value);
					this.SendPropertyChanging();
					this._ProductionCompany = value;
					this.SendPropertyChanged("ProductionCompany");
					this.OnProductionCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int")]
		public System.Nullable<int> Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_Cast", Storage="_Casts", ThisKey="Id", OtherKey="Film")]
		public EntitySet<Cast> Casts
		{
			get
			{
				return this._Casts;
			}
			set
			{
				this._Casts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_Specimen", Storage="_Specimens", ThisKey="Id", OtherKey="Film")]
		public EntitySet<Specimen> Specimens
		{
			get
			{
				return this._Specimens;
			}
			set
			{
				this._Specimens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Film", Storage="_Genre1", ThisKey="Genre", OtherKey="Id", IsForeignKey=true)]
		public Genre Genre1
		{
			get
			{
				return this._Genre1.Entity;
			}
			set
			{
				Genre previousValue = this._Genre1.Entity;
				if (((previousValue != value) 
							|| (this._Genre1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Genre1.Entity = null;
						previousValue.Films.Remove(this);
					}
					this._Genre1.Entity = value;
					if ((value != null))
					{
						value.Films.Add(this);
						this._Genre = value.Id;
					}
					else
					{
						this._Genre = default(int);
					}
					this.SendPropertyChanged("Genre1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionCompany_Film", Storage="_ProductionCompany1", ThisKey="ProductionCompany", OtherKey="Id", IsForeignKey=true)]
		public ProductionCompany ProductionCompany1
		{
			get
			{
				return this._ProductionCompany1.Entity;
			}
			set
			{
				ProductionCompany previousValue = this._ProductionCompany1.Entity;
				if (((previousValue != value) 
							|| (this._ProductionCompany1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductionCompany1.Entity = null;
						previousValue.Films.Remove(this);
					}
					this._ProductionCompany1.Entity = value;
					if ((value != null))
					{
						value.Films.Add(this);
						this._ProductionCompany = value.Id;
					}
					else
					{
						this._ProductionCompany = default(int);
					}
					this.SendPropertyChanged("ProductionCompany1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Casts(Cast entity)
		{
			this.SendPropertyChanging();
			entity.Film1 = this;
		}
		
		private void detach_Casts(Cast entity)
		{
			this.SendPropertyChanging();
			entity.Film1 = null;
		}
		
		private void attach_Specimens(Specimen entity)
		{
			this.SendPropertyChanging();
			entity.Film1 = this;
		}
		
		private void detach_Specimens(Specimen entity)
		{
			this.SendPropertyChanging();
			entity.Film1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Genre")]
	public partial class Genre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Film> _Films;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Genre()
		{
			this._Films = new EntitySet<Film>(new Action<Film>(this.attach_Films), new Action<Film>(this.detach_Films));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Genre_Film", Storage="_Films", ThisKey="Id", OtherKey="Genre")]
		public EntitySet<Film> Films
		{
			get
			{
				return this._Films;
			}
			set
			{
				this._Films.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Films(Film entity)
		{
			this.SendPropertyChanging();
			entity.Genre1 = this;
		}
		
		private void detach_Films(Film entity)
		{
			this.SendPropertyChanging();
			entity.Genre1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hire")]
	public partial class Hire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Inmate;
		
		private int _Specimen;
		
		private System.DateTime _Rentaldate;
		
		private bool _Returned;
		
		private EntityRef<Inmate> _Inmate1;
		
		private EntityRef<Specimen> _Specimen1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnInmateChanging(int value);
    partial void OnInmateChanged();
    partial void OnSpecimenChanging(int value);
    partial void OnSpecimenChanged();
    partial void OnRentaldateChanging(System.DateTime value);
    partial void OnRentaldateChanged();
    partial void OnReturnedChanging(bool value);
    partial void OnReturnedChanged();
    #endregion
		
		public Hire()
		{
			this._Inmate1 = default(EntityRef<Inmate>);
			this._Specimen1 = default(EntityRef<Specimen>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inmate", DbType="Int NOT NULL")]
		public int Inmate
		{
			get
			{
				return this._Inmate;
			}
			set
			{
				if ((this._Inmate != value))
				{
					if (this._Inmate1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInmateChanging(value);
					this.SendPropertyChanging();
					this._Inmate = value;
					this.SendPropertyChanged("Inmate");
					this.OnInmateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specimen", DbType="Int NOT NULL")]
		public int Specimen
		{
			get
			{
				return this._Specimen;
			}
			set
			{
				if ((this._Specimen != value))
				{
					if (this._Specimen1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecimenChanging(value);
					this.SendPropertyChanging();
					this._Specimen = value;
					this.SendPropertyChanged("Specimen");
					this.OnSpecimenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rentaldate", DbType="Date NOT NULL")]
		public System.DateTime Rentaldate
		{
			get
			{
				return this._Rentaldate;
			}
			set
			{
				if ((this._Rentaldate != value))
				{
					this.OnRentaldateChanging(value);
					this.SendPropertyChanging();
					this._Rentaldate = value;
					this.SendPropertyChanged("Rentaldate");
					this.OnRentaldateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Returned", DbType="Bit NOT NULL")]
		public bool Returned
		{
			get
			{
				return this._Returned;
			}
			set
			{
				if ((this._Returned != value))
				{
					this.OnReturnedChanging(value);
					this.SendPropertyChanging();
					this._Returned = value;
					this.SendPropertyChanged("Returned");
					this.OnReturnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inmate_Hire", Storage="_Inmate1", ThisKey="Inmate", OtherKey="Id", IsForeignKey=true)]
		public Inmate Inmate1
		{
			get
			{
				return this._Inmate1.Entity;
			}
			set
			{
				Inmate previousValue = this._Inmate1.Entity;
				if (((previousValue != value) 
							|| (this._Inmate1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Inmate1.Entity = null;
						previousValue.Hires.Remove(this);
					}
					this._Inmate1.Entity = value;
					if ((value != null))
					{
						value.Hires.Add(this);
						this._Inmate = value.Id;
					}
					else
					{
						this._Inmate = default(int);
					}
					this.SendPropertyChanged("Inmate1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specimen_Hire", Storage="_Specimen1", ThisKey="Specimen", OtherKey="Id", IsForeignKey=true)]
		public Specimen Specimen1
		{
			get
			{
				return this._Specimen1.Entity;
			}
			set
			{
				Specimen previousValue = this._Specimen1.Entity;
				if (((previousValue != value) 
							|| (this._Specimen1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specimen1.Entity = null;
						previousValue.Hires.Remove(this);
					}
					this._Specimen1.Entity = value;
					if ((value != null))
					{
						value.Hires.Add(this);
						this._Specimen = value.Id;
					}
					else
					{
						this._Specimen = default(int);
					}
					this.SendPropertyChanged("Specimen1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Inmate")]
	public partial class Inmate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Hire> _Hires;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Inmate()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Hires = new EntitySet<Hire>(new Action<Hire>(this.attach_Hires), new Action<Hire>(this.detach_Hires));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inmate_User", Storage="_Users", ThisKey="Id", OtherKey="Inmate")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Inmate_Hire", Storage="_Hires", ThisKey="Id", OtherKey="Inmate")]
		public EntitySet<Hire> Hires
		{
			get
			{
				return this._Hires;
			}
			set
			{
				this._Hires.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Inmate1 = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Inmate1 = null;
		}
		
		private void attach_Hires(Hire entity)
		{
			this.SendPropertyChanging();
			entity.Inmate1 = this;
		}
		
		private void detach_Hires(Hire entity)
		{
			this.SendPropertyChanging();
			entity.Inmate1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Place;
		
		private int _LocationType;
		
		private EntitySet<Specimen> _Specimens;
		
		private EntityRef<LocationType> _LocationType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    partial void OnLocationTypeChanging(int value);
    partial void OnLocationTypeChanged();
    #endregion
		
		public Location()
		{
			this._Specimens = new EntitySet<Specimen>(new Action<Specimen>(this.attach_Specimens), new Action<Specimen>(this.detach_Specimens));
			this._LocationType1 = default(EntityRef<LocationType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Place", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LocationType", DbType="Int NOT NULL")]
		public int LocationType
		{
			get
			{
				return this._LocationType;
			}
			set
			{
				if ((this._LocationType != value))
				{
					if (this._LocationType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationTypeChanging(value);
					this.SendPropertyChanging();
					this._LocationType = value;
					this.SendPropertyChanged("LocationType");
					this.OnLocationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Specimen", Storage="_Specimens", ThisKey="Id", OtherKey="Location")]
		public EntitySet<Specimen> Specimens
		{
			get
			{
				return this._Specimens;
			}
			set
			{
				this._Specimens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationType_Location", Storage="_LocationType1", ThisKey="LocationType", OtherKey="Id", IsForeignKey=true)]
		public LocationType LocationType1
		{
			get
			{
				return this._LocationType1.Entity;
			}
			set
			{
				LocationType previousValue = this._LocationType1.Entity;
				if (((previousValue != value) 
							|| (this._LocationType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LocationType1.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._LocationType1.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._LocationType = value.Id;
					}
					else
					{
						this._LocationType = default(int);
					}
					this.SendPropertyChanged("LocationType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Specimens(Specimen entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = this;
		}
		
		private void detach_Specimens(Specimen entity)
		{
			this.SendPropertyChanging();
			entity.Location1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationType")]
	public partial class LocationType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Location> _Locations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LocationType()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LocationType_Location", Storage="_Locations", ThisKey="Id", OtherKey="LocationType")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationType1 = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.LocationType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Person")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Surname;
		
		private int _Country;
		
		private EntitySet<Cast> _Casts;
		
		private EntityRef<Country> _Country1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnCountryChanging(int value);
    partial void OnCountryChanged();
    #endregion
		
		public Person()
		{
			this._Casts = new EntitySet<Cast>(new Action<Cast>(this.attach_Casts), new Action<Cast>(this.detach_Casts));
			this._Country1 = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="Int NOT NULL")]
		public int Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					if (this._Country1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Cast", Storage="_Casts", ThisKey="Id", OtherKey="Person")]
		public EntitySet<Cast> Casts
		{
			get
			{
				return this._Casts;
			}
			set
			{
				this._Casts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Person", Storage="_Country1", ThisKey="Country", OtherKey="Id", IsForeignKey=true)]
		public Country Country1
		{
			get
			{
				return this._Country1.Entity;
			}
			set
			{
				Country previousValue = this._Country1.Entity;
				if (((previousValue != value) 
							|| (this._Country1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country1.Entity = null;
						previousValue.Persons.Remove(this);
					}
					this._Country1.Entity = value;
					if ((value != null))
					{
						value.Persons.Add(this);
						this._Country = value.Id;
					}
					else
					{
						this._Country = default(int);
					}
					this.SendPropertyChanged("Country1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Casts(Cast entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = this;
		}
		
		private void detach_Casts(Cast entity)
		{
			this.SendPropertyChanging();
			entity.Person1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionCompany")]
	public partial class ProductionCompany : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Film> _Films;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ProductionCompany()
		{
			this._Films = new EntitySet<Film>(new Action<Film>(this.attach_Films), new Action<Film>(this.detach_Films));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionCompany_Film", Storage="_Films", ThisKey="Id", OtherKey="ProductionCompany")]
		public EntitySet<Film> Films
		{
			get
			{
				return this._Films;
			}
			set
			{
				this._Films.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Films(Film entity)
		{
			this.SendPropertyChanging();
			entity.ProductionCompany1 = this;
		}
		
		private void detach_Films(Film entity)
		{
			this.SendPropertyChanging();
			entity.ProductionCompany1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionCountry")]
	public partial class ProductionCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Film;
		
		private int _Country;
		
		private EntityRef<Country> _Country1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFilmChanging(int value);
    partial void OnFilmChanged();
    partial void OnCountryChanging(int value);
    partial void OnCountryChanged();
    #endregion
		
		public ProductionCountry()
		{
			this._Country1 = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Country1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Film", DbType="Int NOT NULL")]
		public int Film
		{
			get
			{
				return this._Film;
			}
			set
			{
				if ((this._Film != value))
				{
					this.OnFilmChanging(value);
					this.SendPropertyChanging();
					this._Film = value;
					this.SendPropertyChanged("Film");
					this.OnFilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="Int NOT NULL")]
		public int Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_ProductionCountry", Storage="_Country1", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Country Country1
		{
			get
			{
				return this._Country1.Entity;
			}
			set
			{
				Country previousValue = this._Country1.Entity;
				if (((previousValue != value) 
							|| (this._Country1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country1.Entity = null;
						previousValue.ProductionCountry = null;
					}
					this._Country1.Entity = value;
					if ((value != null))
					{
						value.ProductionCountry = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Country1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Cast> _Casts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._Casts = new EntitySet<Cast>(new Action<Cast>(this.attach_Casts), new Action<Cast>(this.detach_Casts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_Cast", Storage="_Casts", ThisKey="Id", OtherKey="Role")]
		public EntitySet<Cast> Casts
		{
			get
			{
				return this._Casts;
			}
			set
			{
				this._Casts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Casts(Cast entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = this;
		}
		
		private void detach_Casts(Cast entity)
		{
			this.SendPropertyChanging();
			entity.Role1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specimen")]
	public partial class Specimen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Film;
		
		private System.Nullable<int> _Carrier;
		
		private int _Location;
		
		private System.Nullable<System.DateTime> _DateAdded;
		
		private bool _Active;
		
		private EntitySet<Hire> _Hires;
		
		private EntityRef<Carrier> _Carrier1;
		
		private EntityRef<Film> _Film1;
		
		private EntityRef<Location> _Location1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFilmChanging(int value);
    partial void OnFilmChanged();
    partial void OnCarrierChanging(System.Nullable<int> value);
    partial void OnCarrierChanged();
    partial void OnLocationChanging(int value);
    partial void OnLocationChanged();
    partial void OnDateAddedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddedChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Specimen()
		{
			this._Hires = new EntitySet<Hire>(new Action<Hire>(this.attach_Hires), new Action<Hire>(this.detach_Hires));
			this._Carrier1 = default(EntityRef<Carrier>);
			this._Film1 = default(EntityRef<Film>);
			this._Location1 = default(EntityRef<Location>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Film", DbType="Int NOT NULL")]
		public int Film
		{
			get
			{
				return this._Film;
			}
			set
			{
				if ((this._Film != value))
				{
					if (this._Film1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFilmChanging(value);
					this.SendPropertyChanging();
					this._Film = value;
					this.SendPropertyChanged("Film");
					this.OnFilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Carrier", DbType="Int")]
		public System.Nullable<int> Carrier
		{
			get
			{
				return this._Carrier;
			}
			set
			{
				if ((this._Carrier != value))
				{
					if (this._Carrier1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierChanging(value);
					this.SendPropertyChanging();
					this._Carrier = value;
					this.SendPropertyChanged("Carrier");
					this.OnCarrierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="Int NOT NULL")]
		public int Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					if (this._Location1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdded", DbType="Date")]
		public System.Nullable<System.DateTime> DateAdded
		{
			get
			{
				return this._DateAdded;
			}
			set
			{
				if ((this._DateAdded != value))
				{
					this.OnDateAddedChanging(value);
					this.SendPropertyChanging();
					this._DateAdded = value;
					this.SendPropertyChanged("DateAdded");
					this.OnDateAddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specimen_Hire", Storage="_Hires", ThisKey="Id", OtherKey="Specimen")]
		public EntitySet<Hire> Hires
		{
			get
			{
				return this._Hires;
			}
			set
			{
				this._Hires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Carrier_Specimen", Storage="_Carrier1", ThisKey="Carrier", OtherKey="Id", IsForeignKey=true)]
		public Carrier Carrier1
		{
			get
			{
				return this._Carrier1.Entity;
			}
			set
			{
				Carrier previousValue = this._Carrier1.Entity;
				if (((previousValue != value) 
							|| (this._Carrier1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Carrier1.Entity = null;
						previousValue.Specimens.Remove(this);
					}
					this._Carrier1.Entity = value;
					if ((value != null))
					{
						value.Specimens.Add(this);
						this._Carrier = value.Id;
					}
					else
					{
						this._Carrier = default(Nullable<int>);
					}
					this.SendPropertyChanged("Carrier1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Film_Specimen", Storage="_Film1", ThisKey="Film", OtherKey="Id", IsForeignKey=true)]
		public Film Film1
		{
			get
			{
				return this._Film1.Entity;
			}
			set
			{
				Film previousValue = this._Film1.Entity;
				if (((previousValue != value) 
							|| (this._Film1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Film1.Entity = null;
						previousValue.Specimens.Remove(this);
					}
					this._Film1.Entity = value;
					if ((value != null))
					{
						value.Specimens.Add(this);
						this._Film = value.Id;
					}
					else
					{
						this._Film = default(int);
					}
					this.SendPropertyChanged("Film1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Location_Specimen", Storage="_Location1", ThisKey="Location", OtherKey="Id", IsForeignKey=true)]
		public Location Location1
		{
			get
			{
				return this._Location1.Entity;
			}
			set
			{
				Location previousValue = this._Location1.Entity;
				if (((previousValue != value) 
							|| (this._Location1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location1.Entity = null;
						previousValue.Specimens.Remove(this);
					}
					this._Location1.Entity = value;
					if ((value != null))
					{
						value.Specimens.Add(this);
						this._Location = value.Id;
					}
					else
					{
						this._Location = default(int);
					}
					this.SendPropertyChanged("Location1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Hires(Hire entity)
		{
			this.SendPropertyChanging();
			entity.Specimen1 = this;
		}
		
		private void detach_Hires(Hire entity)
		{
			this.SendPropertyChanging();
			entity.Specimen1 = null;
		}
	}
}
#pragma warning restore 1591
